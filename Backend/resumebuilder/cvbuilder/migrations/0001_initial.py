# Generated by Django 4.1.3 on 2022-12-08 22:59

import cvbuilder.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Awards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=200)),
                ('Issuer', models.CharField(max_length=200)),
                ('URL', models.URLField()),
                ('Date', models.DateField()),
                ('Description', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Certifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate', models.CharField(max_length=100)),
                ('Issuer', models.CharField(max_length=100)),
                ('URL', models.URLField()),
                ('Description', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Institute', models.CharField(max_length=400)),
                ('Degree', models.CharField(max_length=200)),
                ('School', models.CharField(max_length=200)),
                ('URL', models.URLField()),
                ('City', models.CharField(max_length=200)),
                ('Country', models.CharField(max_length=200)),
                ('StartDate', models.DateField()),
                ('EndDate', models.DateField(blank=True)),
                ('Description', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Interests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Languages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100)),
                ('Level', models.CharField(choices=[('Beginner', 'Beginner'), ('Advanced', 'Advanced'), ('Expert', 'Expert')], default='beginner', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Links',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=100)),
                ('Website', models.URLField(max_length=360)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Image', models.ImageField(upload_to=None)),
                ('Full_Name', models.CharField(max_length=100)),
                ('Date', models.DateField()),
                ('email', models.EmailField(max_length=254)),
                ('Phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('Gender', models.CharField(max_length=300)),
                ('Description', models.CharField(max_length=100)),
                ('Summary', models.CharField(max_length=400)),
                ('Address', models.CharField(max_length=100)),
                ('City', models.CharField(max_length=100)),
                ('Region', models.CharField(max_length=100)),
                ('Country', models.CharField(max_length=100)),
                ('Postal', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100)),
                ('Description', models.CharField(max_length=100)),
                ('StartDate', models.DateField()),
                ('EndDate', models.DateField()),
                ('URL', models.URLField()),
                ('Summary', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=100)),
                ('URL', models.URLField(max_length=100)),
                ('Name', models.CharField(max_length=100)),
                ('Date', models.DateField()),
                ('Description', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='References',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100)),
                ('Relationship', models.CharField(max_length=100)),
                ('Phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
            ],
        ),
        migrations.CreateModel(
            name='Skills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=100)),
                ('Level', models.CharField(choices=[('Beginner', 'Beginner'), ('Advanced', 'Advanced'), ('Expert', 'Expert')], default='Beginner', max_length=50)),
                ('SubSkill', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='VolunteerExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Organization', models.CharField(max_length=100)),
                ('Position', models.CharField(max_length=100)),
                ('StartDate', models.DateField()),
                ('EndDate', models.DateField()),
                ('URL', models.URLField()),
                ('Summary', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Title', models.CharField(max_length=200)),
                ('Position', models.CharField(max_length=200)),
                ('Employer', models.CharField(max_length=100)),
                ('Url', models.URLField()),
                ('StartDate', models.DateField()),
                ('EndDate', models.DateField(blank=True)),
                ('Website', models.URLField(max_length=300)),
                ('Summary', models.CharField(max_length=400)),
                ('present', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_verified', models.BooleanField(default=False, help_text="Designates whether this user's email is verified. ", verbose_name='email_verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', cvbuilder.models.MyUserManager()),
            ],
        ),
    ]
